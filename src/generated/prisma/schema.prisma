// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  walletAddress       String    @unique
  name                String?
  email               String?
  profileImage        String?
  totalPoints         Int       @default(0)
  badgeLevel          Int       @default(1)
  itemsSorted         Int       @default(0)
  challengesCompleted Int       @default(0)
  currentStreak       Int       @default(0)
  lastSortEventDate   DateTime?
  lastLogin           DateTime  @default(now())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  onboarded           Boolean   @default(false)

  // Relations
  challenges UserChallenge[]
  badges     UserBadge[]
  sortEvents SortEvent[]

  @@index([walletAddress])
  @@index([totalPoints])
}

model Challenge {
  id           String   @id @default(uuid())
  title        String
  description  String
  goal         Int
  rewardPoints Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userChallenges UserChallenge[]

  @@index([isActive])
}

model UserChallenge {
  id          String   @id @default(uuid())
  userId      String
  challengeId String
  progress    Int      @default(0)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
}

model Badge {
  id             String   @id @default(uuid())
  name           String
  description    String
  requiredPoints Int
  nftTokenId     String?
  imageUrl       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  userBadges UserBadge[]

  @@index([requiredPoints])
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  badgeId   String
  minted    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model SortEvent {
  id           String   @id @default(uuid())
  userId       String
  itemType     String
  pointsEarned Int
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}
